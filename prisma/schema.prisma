generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       Int           @id @default(autoincrement())
  name                     String
  email                    String        @unique
  password                 String?
  emailVerified            Boolean       @default(false)
  verificationCode         String?
  phoneVerified            Boolean       @default(false)
  phone                    String?
  phoneVerificationCode    String?
  kycApproved              Boolean       @default(false)
  kycData                  Json?         // Changed back to Json for PostgreSQL
  plaidConnected           Boolean       @default(false)
  plaidAccessToken         String?       // Encrypted Plaid access token
  plaidItemId              String?       // Plaid item ID
  plaidSyncMetadata        Json?         // Plaid sync metadata and status
  onboardingCompleted      Boolean       @default(false)
  transactionDataReady     Boolean       @default(false) // Indicates if 90-day transaction analysis is complete
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  userType                 String?       // 'consumer', 'creator', 'hybrid'

  envelopes                Envelope[]
  cards                    Card[]
  transactions             Transaction[]
  transfers                Transfer[]
  rules                    Rule[]
  routingConfig            RoutingConfig?
  userMemories             UserMemory[]
  serviceAccounts          ServiceAccount[]
  goals                    Goal[]
  conversations            Conversation[]
  embeddings               Embedding[]
}

model Envelope {
  id             Int      @id @default(autoincrement())
  name           String
  icon           String?
  color          String?  @default("blue")
  balanceCents   Int      @default(0)
  spentThisMonth Int      @default(0)
  order          Int      @default(0)
  isActive       Boolean  @default(true)
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  autoAllocate          Boolean @default(false)
  allocationPercentage  Float?  // For auto-routing (e.g., 10% for tithe)

  // Enhanced envelope system fields
  targetAmount   Float    @default(0)
  category       String?  // 'giving', 'necessities', 'savings', etc.
  description    String?
  priority       String?  // 'essential', 'important', 'optional'

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionsFrom  Transaction[]     @relation("FromEnvelope")
  transfersFrom     Transfer[]        @relation("TransferFrom")
  transfersTo       Transfer[]        @relation("TransferTo")
  rules             Rule[]
  card              Card?

  @@unique([userId, name])
  @@map("envelopes")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  amountCents     Int      // negative for spend, positive for refund
  merchant        String
  mcc             String?
  location        String?
  reason          String?
  status          String   @default("SETTLED") // PENDING, SETTLED, DECLINED
  wasHold         Boolean  @default(false)
  holdAmountCents Int?
  externalId      String?  @unique
  plaidTransactionId String? @unique // Plaid transaction ID
  accountId       String?  // Plaid account ID
  envelopeId      Int?
  userId          Int
  cardId          Int?
  authorizedAt    DateTime?
  postedAt        DateTime?
  pending         Boolean  @default(false) // Plaid pending status
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  envelope Envelope? @relation("FromEnvelope", fields: [envelopeId], references: [id])
  card     Card?     @relation(fields: [cardId], references: [id])

  @@map("transactions")
}

model Transfer {
  id                   Int      @id @default(autoincrement())
  amountCents          Int
  note                 String?
  fromId               Int?
  toId                 Int?
  userId               Int
  fromEnvelopeId       Int?     // For new column name consistency
  toEnvelopeId         Int?     // For new column name consistency
  amount               Float?   // For backwards compatibility
  description          String?
  category             String?  // 'auto_route', 'manual', 'split'
  sourceTransactionId  String?  // Link to originating transaction
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromEnvelope Envelope? @relation("TransferFrom", fields: [fromId], references: [id])
  toEnvelope   Envelope? @relation("TransferTo", fields: [toId], references: [id])

  @@map("transfers")
}

model Rule {
  id         Int      @id @default(autoincrement())
  priority   Int      @default(0)
  mcc        String?  // equals match
  merchant   String?  // contains match (case-insensitive)
  geofence   String?  // location match
  envelopeId Int?
  enabled    Boolean  @default(true)
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  envelope Envelope? @relation(fields: [envelopeId], references: [id], onDelete: Cascade)

  @@map("rules")
}

model Card {
  id                    Int           @id @default(autoincrement())
  userId                Int
  envelopeId            Int?
  label                 String        @default("Virtual Card")
  last4                 String
  cardNumber            String?       // Full card number for wallet provisioning (encrypted in production)
  expiryMonth           Int?
  expiryYear            Int?
  cvv                   String?       // CVV for wallet provisioning (encrypted in production)
  status                String        @default("ACTIVE") // ACTIVE, SUSPENDED, EXPIRED, CANCELED
  isDefault             Boolean       @default(false)
  inWallet              Boolean       @default(false)

  // Wallet integration fields
  walletEligible        Boolean       @default(true)
  walletProvisioned     Boolean       @default(false)
  lastWalletActivity    DateTime?

  // Spending controls
  spendingLimitCents    Int?          // Optional spending limit per card
  dailyLimitCents       Int?          // Optional daily limit
  monthlyLimitCents     Int?          // Optional monthly limit

  // Usage tracking
  lastUsed              DateTime?
  totalTransactions     Int           @default(0)
  totalSpentCents       Int           @default(0)

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  envelope              Envelope?     @relation(fields: [envelopeId], references: [id], onDelete: SetNull)
  transactions          Transaction[]

  @@unique([envelopeId])
}

model RoutingConfig {
  id               Int    @id @default(autoincrement())
  spendMode        String @default("SMART_AUTO") // LOCKED, SMART_AUTO, GENERAL_POOL
  lockedEnvelopeId Int?
  useGeneralPool   Boolean @default(true)
  bufferCents      Int     @default(0)
  confidence       Int     @default(75) // 0-100 slider
  userId           Int    @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("routing_configs")
}

model UserMemory {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // conversation, bank_statement, spending_pattern, goal
  content   String   // The actual content/text
  embedding String?  // JSON array of embedding vector
  metadata  String?  // JSON metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_memories")
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  codeHash  String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ServiceAccount {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  tokenHash   String   @unique
  permissions String   // JSON string of permission array for SQLite compatibility
  enabled     Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
}

model Goal {
  id            String   @id @default(cuid())
  userId        Int
  description   String
  targetAmount  Float
  currentAmount Float?   @default(0)
  targetDate    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    Int
  sessionId String
  role      String   // 'user', 'assistant', 'system'
  content   String
  agentName String?  // which agent handled this message
  metadata  String?  // additional metadata like tool calls, handoffs, etc. (JSON string for SQLite)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionId])
  @@index([sessionId])
  @@map("conversations")
}

// Vector embeddings for RAG (Retrieval-Augmented Generation)
model Embedding {
  id          String   @id @default(cuid())
  ownerId     Int      // User ID who owns this embedding
  docType     String   // Type of document (conversation, bank_statement, spending_pattern, goal, etc.)
  content     String   // The actual content/text
  embedding   Unsupported("vector(1536)") // pgvector embedding (1536 dimensions for OpenAI ada-002)
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId, docType])
  @@index([docType])
  @@map("embeddings")
}

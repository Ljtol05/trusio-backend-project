~/workspace$ npm run test:agents

> envelope-app-backend@1.0.0 test:agents
> vitest run --config vitest.config.agents.ts


 RUN  v1.6.1 /home/runner/workspace

       ✓ should validate agent names in handoff
     ✓ GET /api/ai/agents (1)
       ✓ should return list of available agents
     ✓ GET /api/ai/tools (2)
       ✓ should return list of available tools
       ✓ should filter tools by category
     ✓ GET /api/ai/sessions/:sessionId/history (1)
       ✓ should return conversation history
       ✓ should validate agent names in handoff
     ✓ GET /api/ai/agents (1)
       ✓ should return list of available agents
     ✓ GET /api/ai/tools (2)
       ✓ should return list of available tools
       ✓ should filter tools by category
     ✓ GET /api/ai/sessions/:sessionId/history (1)
       ✓ should return conversation history
       ✓ FinancialContextSchema (3)
         ✓ should validate correct financial context
         ✓ should accept minimal financial context
         ✓ should reject invalid financial context
       ✓ AgentResponseSchema (2)
         ✓ should validate correct agent response
         ✓ should reject invalid agent response
     ✓ Tool Parameter Validation (2)
       ✓ should validate budget analysis parameters
       ✓ should reject invalid tool parameters
     ✓ Error Handling Validation (3)
       ✓ should handle database validation errors gr
acefully
       ✓ should validate agent handoff parameters
       ✓ should reject invalid handoff parameters
       ✓ FinancialContextSchema (3)
         ✓ should validate correct financial context
         ✓ should accept minimal financial context
         ✓ should reject invalid financial context
       ✓ AgentResponseSchema (2)
         ✓ should validate correct agent response
         ✓ should reject invalid agent response
     ✓ Tool Parameter Validation (2)
       ✓ should validate budget analysis parameters
       ✓ should reject invalid tool parameters
     ✓ Error Handling Validation (3)
       ✓ should handle database validation errors gr
acefully
       ✓ should validate agent handoff parameters
       ✓ should reject invalid handoff parameters
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts
 (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limit
s
       ✓ should handle multiple concurrent agent req
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
       ✓ should add security headers
 ✓ |agents| src/agents/__tests__/tools.test.ts (14)
   ✓ Financial Tools (14)
     ✓ Tool Registry (2)
       ✓ should have all required transaction tools 
registered
       ✓ should return correct tool count
     ✓ Budget Tools (2)
       ✓ should execute budget analysis tool success
fully
       ✓ should handle budget analysis errors gracef
ully
     ✓ Envelope Tools (2)
       ✓ should create envelope successfully
 ✓ |agents| src/agents/__tests__/integration.test.ts (16)
   ✓ Agent API Integration Tests (16)
     ✓ POST /api/ai/chat (5)
       ✓ should handle basic chat request successfully
       ✓ should route to appropriate agent based on message
       ✓ should include conversation history when requested
       ✓ should handle validation errors
       ✓ should require authentication
     ✓ POST /api/ai/tools/execute (2)
       ✓ should execute tool directly
       ✓ should handle tool execution errors
     ✓ POST /api/ai/handoff (2)
       ✓ should handle agent handoff successfully
       ✓ should validate agent names in handoff
     ✓ GET /api/ai/agents (1)
       ✓ should return list of available agents
     ✓ GET /api/ai/tools (2)
       ✓ should return list of available tools
       ✓ should filter tools by category
     ✓ GET /api/ai/sessions/:sessionId/history (1)
       ✓ should return conversation history
     ✓ GET /api/ai/status (1)
       ✓ should return system status
     ✓ Error Handling (2)
       ✓ should handle database connection errors gracefully
       ✓ should handle agent unavailability
 ✓ |agents| src/agents/__tests__/validation.test.ts (20)
   ✓ Data Validation Tests (20)
     ✓ Schema Validation (7)
       ✓ AgentConfigSchema (2)
         ✓ should validate correct agent configuration
         ✓ should reject invalid agent configuration
       ✓ FinancialContextSchema (3)
         ✓ should validate correct financial context
         ✓ should accept minimal financial context
         ✓ should reject invalid financial context
       ✓ AgentResponseSchema (2)
         ✓ should validate correct agent response
         ✓ should reject invalid agent response
     ✓ Tool Parameter Validation (2)
       ✓ should validate budget analysis parameters
       ✓ should reject invalid tool parameters
     ✓ Error Handling Validation (3)
       ✓ should handle database validation errors gracefully
       ✓ should validate agent handoff parameters
       ✓ should reject invalid handoff parameters
     ✓ Input Sanitization (3)
       ✓ should sanitize user input messages
       ✓ should handle SQL injection attempts in parameters
       ✓ should validate envelope creation with proper limits
     ✓ Type Safety Validation (2)
       ✓ should enforce type safety in agent responses
       ✓ should enforce type safety in financial context
     ✓ Business Logic Validation (3)
       ✓ should validate financial constraints
       ✓ should validate budget constraints
       ✓ should validate date constraints
 ✓ |agents| src/agents/__tests__/performance.test.ts (12)
   ✓ Agent Performance Tests (12)
     ✓ Agent Response Times (3)
       ✓ should respond within acceptable time limits
       ✓ should handle multiple concurrent agent requests
       ✓ should maintain performance with large financial context
     ✓ Tool Performance (2)
       ✓ should execute tools within acceptable time limits
       ✓ should handle concurrent tool executions
     ✓ Memory and Resource Usage (2)
       ✓ should not leak memory during repeated operations
       ✓ should handle agent registry operations efficiently
     ✓ Stress Testing (2)
       ✓ should handle high-frequency agent requests
       ✓ should gracefully degrade under extreme load
     ✓ Edge Cases and Resilience (3)
       ✓ should handle malformed context gracefully
       ✓ should handle very long messages efficiently
       ✓ should maintain performance with frequent agent switching
 ✓ |agents| src/agents/__tests__/security.test.ts (15)
   ✓ Security Middleware (15)
     ✓ Input Sanitization (3)
       ✓ should sanitize XSS attempts
       ✓ should sanitize email inputs
       ✓ should sanitize alphanumeric inputs
     ✓ Threat Detection (4)
       ✓ should detect XSS attempts
       ✓ should detect SQL injection attempts
       ✓ should detect path traversal attempts
       ✓ should detect command injection attempts
     ✓ Input Validation (3)
       ✓ should validate and sanitize simple strings
       ✓ should validate complex objects
       ✓ should pass safe inputs
     ✓ Security Middleware Integration (5)
       ✓ should block malicious requests
       ✓ should allow safe requests
       ✓ should sanitize inputs when enabled
       ✓ should enforce rate limiting
       ✓ should add security headers
 ✓ |agents| src/agents/__tests__/tools.test.ts (14)
   ✓ Financial Tools (14)
     ✓ Tool Registry (2)
       ✓ should have all required transaction tools registered
       ✓ should return correct tool count
     ✓ Budget Tools (2)
       ✓ should execute budget analysis tool successfully
       ✓ should handle budget analysis errors gracefully
     ✓ Envelope Tools (2)
       ✓ should create envelope successfully
       ✓ should transfer funds between envelopes
     ✓ Transaction Tools (2)
       ✓ should categorize transactions correctly
       ✓ should analyze spending patterns
     ✓ Analysis Tools (1)
       ✓ should analyze budget variance
     ✓ Insight Tools (2)
       ✓ should generate personalized recommendations
       ✓ should identify financial opportunities
     ✓ Agent Handoff Tool (1)
       ✓ should execute agent handoff successfully
     ✓ Tool Error Handling (2)
       ✓ should handle non-existent tool gracefully
       ✓ should handle tool execution timeout
 ✓ |agents| src/agents/__tests__/agentRegistry.test.ts (12)
   ✓ AgentRegistry (12)
     ✓ Agent Initialization (2)
       ✓ should initialize all required agents
       ✓ should properly assign tools to agents
     ✓ Agent Routing (4)
       ✓ should route budget-related messages to budget coach
       ✓ should route transaction-related messages to transaction analyst
       ✓ should route insight-related messages to insight generator
       ✓ should default to financial advisor for general messages
     ✓ Agent Execution (3)
       ✓ should successfully run an agent with context
       ✓ should handle agent execution errors gracefully
       ✓ should throw error for non-existent agent
     ✓ Agent Capabilities (2)
       ✓ should return correct capabilities for each agent
       ✓ should return empty array for non-existent agent capabilities
     ✓ Agent Metrics (1)
       ✓ should return comprehensive metrics for all agents

 Test Files  6 passed (6)
      Tests  89 passed (89)
   Start at  01:38:58
   Duration  1.36s (transform 343ms, setup 93ms, collect 580ms, tests 297ms, environment 0ms, prepare 111ms)

JUNIT report written to /home/runner/workspace/src/agents/test-results/agents-junit.xml

> envelope-app-backend@1.0.0 test:agents
> vitest run --config vitest.config.agents.ts


 RUN  v1.6.1 /home/runner/workspace

 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > AgentConfigSchema > should validate correct agent configuration
   → expected false to be true // Object.is equality
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > AgentConfigSchema > should reject invalid agent configuration
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > FinancialContextSchema > should validate correct financial context
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > FinancialContextSchema > should accept minimal financial context
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > FinancialContextSchema > should reject invalid financial context
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > AgentResponseSchema > should validate correct agent response
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Schema Validation > AgentResponseSchema > should reject invalid agent response
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Tool Parameter Validation > should validate budget analysis parameters
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Tool Parameter Validation > should reject invalid tool parameters
   → expected 'Tool not found: create_envelope' to contain 'validation'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Error Handling Validation > should handle database validation errors gracefully
   → expected 'Tool not found: budget_analysis' to contain 'Validation failed'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Error Handling Validation > should validate agent handoff parameters
   → expected false to be true // Object.is equality
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Error Handling Validation > should reject invalid handoff parameters
   → expected 'Tool not found: agent_handoff' to contain 'validation'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Input Sanitization > should sanitize user input messages
   → Input validation failed: Potentially malicious content detected
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Input Sanitization > should handle SQL injection attempts in parameters
   → expected 'Tool not found: categorize_transaction' to contain 'validation'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Input Sanitization > should validate envelope creation with proper limits
   → expected 'Tool not found: create_envelope' to contain 'validation'
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Type Safety Validation > should enforce type safety in agent responses
 ✓ src/agents/__tests__/validation.test.ts > Data Validation Tests > Type Safety Validation > should enforce type safety in financial context
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Business Logic Validation > should validate financial constraints
   → expected 'Tool not found: transfer_funds' to contain 'positive amount'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Business Logic Validation > should validate budget constraints
   → expected 'Tool not found: create_envelope' to contain 'validation'
 × src/agents/__tests__/validation.test.ts > Data Validation Tests > Business Logic Validation > should validate date constraints
   → expected false to be true // Object.is equality
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Tool Registry > should have all required transaction tools registered
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Tool Registry > should return correct tool count
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Budget Tools > should execute budget analysis tool successfully
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Budget Tools > should handle budget analysis errors gracefully
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Envelope Tools > should create envelope successfully
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Envelope Tools > should transfer funds between envelopes
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Transaction Tools > should categorize transactions correctly
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Transaction Tools > should analyze spending patterns
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Analysis Tools > should analyze budget variance
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Insight Tools > should generate personalized recommendations
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Insight Tools > should identify financial opportunities
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Agent Handoff Tool > should execute agent handoff successfully
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Tool Error Handling > should handle non-existent tool gracefully
 ✓ src/agents/__tests__/tools.test.ts > Financial Tools > Tool Error Handling > should handle tool execution timeout
 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Agent Response Times > should respond within acceptable time limits
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Agent Response Times > should handle multiple concurrent agent requests
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Agent Response Times > should maintain performance with large financial context 391ms
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 ✓ src/agents/__tests__/performance.test.ts > Agent Performance Tests > Tool Performance > should execute tools within acceptable time limits
 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Tool Performance > should handle concurrent tool executions
   → expected false to be true // Object.is equality
 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Memory and Resource Usage > should not leak memory during repeated operations
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 ✓ src/agents/__tests__/performance.test.ts > Agent Performance Tests > Memory and Resource Usage > should handle agent registry operations efficiently
 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Stress Testing > should handle high-frequency agent requests
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Stress Testing > should gracefully degrade under extreme load
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Edge Cases and Resilience > should handle malformed context gracefully
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Edge Cases and Resilience > should handle very long messages efficiently
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/performance.test.ts > Agent Performance Tests > Edge Cases and Resilience > should maintain performance with frequent agent switching
   → [vitest] No "createAgentResponse" export is defined on the "../../lib/openai.ts" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 × src/agents/__tests__/agentRegistry.test.ts > AgentRegistry > Agent Initialization > should initialize all required agents
   → expected {} to have property 'length'
 × src/agents/__tests__/agentRegistry.test.ts > AgentRegistry > Agent Initialization > should properly assign tools to agents
   → expected undefined not to be undefined
 × src/agents/__tests__/agentRegistry.test.ts > AgentRegistry > Agent Routing > should route budget-related messages to budget coach
   → expected Promise{…} to be BudgetCoachAgent{ …(2) } // Object.is equality
 × src/agents/__tests__/agentRegistry.test.ts > AgentRegistry > Agent Routing > should route transaction-related messages to transaction analyst
   → expected Promise{…} to be TransactionAnalystAgent{ …(2) } // Object.is equality